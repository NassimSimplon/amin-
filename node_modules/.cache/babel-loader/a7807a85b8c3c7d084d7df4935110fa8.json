{"ast":null,"code":"import axios from \"axios\";\nimport { fetchLogin } from \"../helpers/axios\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const login = user => async dispatch => {\n  try {\n    const res = await fetchLogin(user);\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      console.log(token);\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n\n    console.log(\"payload\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_FAILED\",\n        payload: {\n          error: \"Failed to login\"\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    const res = await axios.post(`http//:localhost:8000/user/signout`);\n    dispatch({\n      type: \"LOGOUT_REQUEST\"\n    });\n\n    if (res.data) {\n      localStorage.clear();\n      dispatch({\n        type: \"LOGOUT_SUCCESS\"\n      });\n    } else {\n      dispatch({\n        type: 'LOGOUT_FAILED',\n        payload: {\n          error: res.data.error\n        }\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/nassim/Desktop/test-auth/client/src/actions/authactions.js"],"names":["axios","fetchLogin","LOGIN_REQUEST","login","user","dispatch","res","status","token","data","console","log","type","payload","error","isUserLoggedIn","localStorage","getItem","JSON","parse","signout","post","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACN,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AAClD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAML,UAAU,CAACG,IAAD,CAA5B;;AACA,QAAIE,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM;AAAEC,QAAAA,KAAF;AAASJ,QAAAA;AAAT,UAAkBE,GAAG,CAACG,IAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEAH,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAE;AACPL,UAAAA,KADO;AAEPJ,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAXD,MAWO;AACL,UAAIE,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBF,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAE,cADC;AAEPC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAER,GAAG,CAACG,IAAJ,CAASK;AAAlB;AAFF,SAAD,CAAR;AAID;AACF;;AAEDJ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,GAvBD,CAuBE,OAAOG,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,CA3BO;AA6BR,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOV,QAAP,IAAoB;AACzB,UAAMG,KAAK,GAAGQ,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIT,KAAJ,EAAW;AACT,YAAMJ,IAAI,GAAGc,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAZ,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAE;AACPL,UAAAA,KADO;AAEPJ,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLC,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,cADC;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAE;AADA;AAFF,OAAD,CAAR;AAMD;AACF,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMM,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOf,QAAP,IAAoB;AACvB,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACqB,IAAN,CAAY,oCAAZ,CAAlB;AACAhB,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAE;AADC,KAAD,CAAR;;AAES,QAAGN,GAAG,CAACG,IAAP,EAAY;AAGnBO,MAAAA,YAAY,CAACM,KAAb;AAEAjB,MAAAA,QAAQ,CAAC;AAACO,QAAAA,IAAI,EAAC;AAAN,OAAD,CAAR;AAED,KAPQ,MAOJ;AACXP,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAC,eADA;AAELC,QAAAA,OAAO,EAAC;AAACC,UAAAA,KAAK,EAAER,GAAG,CAACG,IAAJ,CAASK;AAAjB;AAFH,OAAD,CAAR;AAIO;AAEJ,GAlBD;AAmBD,CApBM","sourcesContent":["import axios from \"axios\";\nimport { fetchLogin } from \"../helpers/axios\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\n export const login = (user) => async (dispatch) => {\n  try {\n    const res = await fetchLogin(user);\n    if (res.status === 200) {\n      const { token, user } = res.data;\n      console.log(token);\n       \n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user,\n        },\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          payload: { error: res.data.error },\n        });\n      }\n    }\n\n    console.log(\"payload\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user\n        },\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_FAILED\",\n        payload: {\n          error: \"Failed to login\"\n        },\n      });\n    }\n  };\n};\n\nexport const signout = () => {\n  return async (dispatch) => {\n      const res = await axios.post(`http//:localhost:8000/user/signout`)\n      dispatch({\n        type: \"LOGOUT_REQUEST\"\n      });      if(res.data){\n      \n\n        localStorage.clear();\n     \n        dispatch({type:\"LOGOUT_SUCCESS\"})\n\n      }else{\ndispatch({\n    type:'LOGOUT_FAILED',\n    payload:{error: res.data.error}\n})\n      }\n  \n  };\n};\n"]},"metadata":{},"sourceType":"module"}