{"ast":null,"code":"import { fetchLogin } from \"../helpers/axios\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\nexport const login = user => async dispatch => {\n  try {\n    const res = await fetchLogin(user);\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      console.log(token);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n\n    console.log(\"payload\");\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_FAILED\",\n        payload: {\n          error: \"Failed to login\"\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    localStorage.clear();\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n  };\n};","map":{"version":3,"sources":["/home/nassim/Desktop/test-auth/client/src/actions/authactions.js"],"names":["fetchLogin","LOGIN_REQUEST","login","user","dispatch","res","status","token","data","console","log","localStorage","setItem","JSON","stringify","type","payload","error","isUserLoggedIn","getItem","parse","signout","clear"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,OAAO,MAAMC,aAAa,GAAG,eAAtB;AAEP,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAML,UAAU,CAACG,IAAD,CAA5B;;AACA,QAAIE,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,YAAM;AAAEC,QAAAA,KAAF;AAASJ,QAAAA;AAAT,UAAkBE,GAAG,CAACG,IAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,KAA9B;AACAI,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAA7B;AACAC,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAE;AACPT,UAAAA,KADO;AAEPJ,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KAZD,MAYO;AACL,UAAIE,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBF,QAAAA,QAAQ,CAAC;AACPW,UAAAA,IAAI,EAAE,cADC;AAEPC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAEZ,GAAG,CAACG,IAAJ,CAASS;AAAlB;AAFF,SAAD,CAAR;AAID;AACF;;AAEDR,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACD,GAxBD,CAwBE,OAAOO,KAAP,EAAc;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACD;AACF,CA5BM;AA8BP,OAAO,MAAMC,cAAc,GAAG,MAAM;AAClC,SAAO,MAAOd,QAAP,IAAoB;AACzB,UAAMG,KAAK,GAAGI,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIZ,KAAJ,EAAW;AACT,YAAMJ,IAAI,GAAGU,IAAI,CAACO,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CAAb;AACAf,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAE,eADC;AAEPC,QAAAA,OAAO,EAAE;AACPT,UAAAA,KADO;AAEPJ,UAAAA;AAFO;AAFF,OAAD,CAAR;AAOD,KATD,MASO;AACLC,MAAAA,QAAQ,CAAC;AACPW,QAAAA,IAAI,EAAE,cADC;AAEPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,KAAK,EAAE;AADA;AAFF,OAAD,CAAR;AAMD;AACF,GAnBD;AAoBD,CArBM;AAuBP,OAAO,MAAMI,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOjB,QAAP,IAAoB;AACzBO,IAAAA,YAAY,CAACW,KAAb;AACAlB,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEd;AADC,KAAD,CAAR;AAGD,GALD;AAMD,CAPM","sourcesContent":["import { fetchLogin } from \"../helpers/axios\";\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\n\nexport const login = (user) => async (dispatch) => {\n  try {\n    const res = await fetchLogin(user);\n    if (res.status === 200) {\n      const { token, user } = res.data;\n      console.log(token);\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user,\n        },\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: \"LOGIN_FAILED\",\n          payload: { error: res.data.error },\n        });\n      }\n    }\n\n    console.log(\"payload\");\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const isUserLoggedIn = () => {\n  return async (dispatch) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: {\n          token,\n          user,\n        },\n      });\n    } else {\n      dispatch({\n        type: \"LOGIN_FAILED\",\n        payload: {\n          error: \"Failed to login\"\n        },\n      });\n    }\n  };\n};\n\nexport const signout = () => {\n  return async (dispatch) => {\n    localStorage.clear();\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}